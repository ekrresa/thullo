// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?      @map("email_verified")
  username       String?        @unique @db.VarChar(100)
  isGuest        Boolean        @default(false) @map("is_guest")
  isProfileSetup Boolean        @default(false) @map("is_profile_setup")
  image          String?
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  boards         BoardMembers[]
  invites        BoardInvite[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Board {
  id          String          @id @default(cuid())
  title       String
  slug        String
  description String?
  image       String?
  cover       String?
  visibility  BoardVisibility
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  members     BoardMembers[]
  invites     BoardInvite[]

  @@map("boards")
}

model BoardMembers {
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String   @map("board_id")
  member    User     @relation(fields: [memberId], references: [id])
  memberId  String   @map("member_id")
  role      Role
  isOwner   Boolean  @default(false) @map("is_owner")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([boardId, memberId])
  @@index([boardId])
  @@index([memberId])
  @@map("board_members")
}

model BoardInvite {
  id          String    @id @default(cuid())
  email       String
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     String    @map("board_id")
  invitedBy   User      @relation(fields: [invitedById], references: [id])
  invitedById String    @map("invited_by_id")
  role        Role
  accepted    Boolean?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  @@index([boardId])
  @@index([invitedById])
  @@map("board_invites")
}

enum BoardVisibility {
  PUBLIC
  PRIVATE
}

enum Role {
  ADMIN
  MEMBER
}
